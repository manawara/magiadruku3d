datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model Page {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   Int
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String?
  password String
  page     Page[]
  role     Role     @default(CUSTOMER)
}
enum Role {
  CUSTOMER
  MODERATOR
  ADMIN
}

model Category {
  id          Int              @id @default(autoincrement())
  mainCategory Json            // Przechowuje tłumaczenia jako JSON, np. {"pl": "Kategoria główna", "en": "Main category"}
  children    CategoryChild[]  
  imageUrlMain  String
  metaTitle       Json?  // Dodaj to pole, jeśli go nie ma
  metaTag         Json?  // Dodaj to pole, jeśli go nie ma
  metaDescription Json?  // Dodaj to pole, jeśli go nie ma
  page Page[]
}

model CategoryChild {
  id          Int      @id @default(autoincrement())
  name        Json     // Przechowuje tłumaczenia jako JSON, np. {"pl": "Podkategoria", "en": "Subcategory"}
  categoryId  Int     
  category    Category @relation(fields: [categoryId], references: [id]) 
}
model Product {
  id                Int       @id @default(autoincrement())
  brand             String
  categoryChildName Json  // Array stored as JSON
  categoryName      Json
  colors            Json      // Change from String to Json
  description       Json
  discount          Int       @default(0)
  images            Json      // Change from String to Json
  price             Decimal   @db.Decimal(10, 2)
  productName       Json
  size              String
  stock             Int       @default(1)
  tag               String    
  tex               Int       @default(23)
  weight            Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  sold              Int       @default(0)
  ratings           Rating[]  // Relation to Rating model
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int      // Rating value (e.g., 1-5)
  comment   String?  // Optional comment from user
  userId    String   // ID of the user who rated
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Ensure one rating per user per product
}

model Carrier {
  id        Int      @id @default(autoincrement())
  name   String @unique
  active Boolean @default(false)
}

model BannerMain {
  id        Int     @id @default(autoincrement())
  title     Json
  subTitle  Json
  price     Int
  status    String
  order     Int
  linkProduct String
  linkImage  String?  // Add this line if missing; use ? if optional
  discount  Int
}

enum Status {
  inactive
  active
}